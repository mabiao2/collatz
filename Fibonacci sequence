#python中也不例外，最基本的那种递归（如下fib1)效率太低了，只要n数字大了运算时间就会很长；
#而通过将计算的指保存到一个dict中，后面计算时直接拿来使用，
#这种方式成为备忘(memo)，如下面的fib2函数所示，则会发现效率大大提高
import datetime
def fib1(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib1(n - 1) + fib1(n - 2)
 
 
known = {0: 0, 1: 1}
 
 
def fib2(n):
    if n in known:
        return known[n]
    res = fib2(n - 1) + fib2(n - 2)
    known[n] = res
    return res
 
 
if __name__ == '__main__':
    n = 20
    a1=datetime.datetime.now()
    print('fib1(%d)=%d' % (n, fib1(n)))
    a2=datetime.datetime.now()
    print('The fib1 total time{}'.format(a2-a1))
    print('fib2(%d)=%d' % (n, fib2(n)))
    a3=datetime.datetime.now()
    print('The fib2 total time{}'.format(a3-a2))

